var utility = require('utility');
var dsHelper = require('dataServer_helper');
var hikerJoy = require('hikerJoy');
var Q = require('q');

var uploadImageForHtmlPost = function (arr) {
    if (!hikerJoy.validate.validateNonEmptyArray(arr))
        return null;
    var ret = [];
    arr.forEach(function (v) {
        var imgPromises = uploadImageForHtmlPostTag(v);
        if (imgPromises)
            ret = ret.concat(imgPromises);
    });
    return ret; //array of promises
};

var uploadImageForHtmlPostTag = function (tag) {
    if (!tag || (typeof tag.T) !== 'string')
        return null;
    var t = tag.T.trim().toLowerCase();
    if (__htmlBlackList.contains(t)) {
        return null;
    }
    if (t === 'img') {
        var src = tag.V;
        if (hikerJoy.validate.validatePicUrlInBase64(src)) {
            var defer = new Q.defer();
            var uploadReq = utility.getImagePostFormat(src);
            dsHelper.uploadRequest([uploadReq])
            .then(function (vals) {
                if (!vals || !Array.isArray(vals) || !vals[0]) {
                    defer.reject(new Error('uploading image failed for html post'));
                }
                else {
                    tag.V = vals[0]; //replace the image.src with the url (provided by file server)
                    defer.resolve(vals[0]);
                }
            })
            .fail(function (err) {
                if (!err.expected) console.log(err.stack);
                defer.reject(err);
            });
            return defer.promise;
        }
        else {
            return null;
        }
    }
    else if (t === 'text') {
        return null;
    }
    else if (Array.isArray(tag.C) && tag.C.length > 0) {
        return uploadImageForHtmlPost(tag.C);
    }
    else {
        return null;
    }
};

var __htmlBlackList = ['script', 'form', 'link', 'head', 'body', 'html'];

exports.uploadImageForHtmlPost = uploadImageForHtmlPost;
