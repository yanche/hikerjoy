
var crypto = require('crypto');
var Q = require('q');
var hikerJoy = require('hikerJoy');
var dataBase = require('hikerJoy_dataBase');
var log = require('hikerJoy_logClient');

var rsaKey = null;
var rsa = require('hikerJoy_rsa');
var authClient = require('hikerJoy_authClient');
authClient.getRSA()
.then(function (ret) {
    if (ret && ret.n && ret.d)
        rsaKey = rsa.importPrivateKey(ret.n, ret.e, ret.d);
    else
        throw new Error('invalid getRSA return format');
})
.fail(function (err) {
    console.log('failed to load RSAKey from authServer, err: ' + err);
});

var getRSAKey = function () {
    return rsaKey;
};

var getSignKey = function () {
    var n = '83ccee7cbcb896afd6359649f58c428a8e9b2182426169c637a5edce5d7699d6188e24499e0dcf5b9c33f225b88a757d13e1230e6bfc2cf1b2286fd2c31dcd968e80276706684c490f2d245589437d62ed80e2de449ebb135f9812718dce359fbfdf08f3742408446ca2624740b7c267798ae2647a704866254f288fd3d994bd';
    var d = '57ddf453287b0f1fe423b986a3b2d70709bcc10181964684251949343e4f113965b41831140934e7bd77f6c3d05c4e536296175ef2a81df676c59fe1d76933b8b495d9158add7048ac71afcd4ab2951b95d5e5b5c79d15f3b78166649087f4ad2564e051d83a004385adcbccdee8787c093ad9fb96e5df9eaf0ac5ec0d0c10d3';
    return rsa.importPublicKey(n, d);
};

var toMD5 = function (text) {
    if ((typeof text) !== 'string')
        return null;
    var md5sum = crypto.createHash('md5');
    md5sum.update(text);
    return md5sum.digest('hex');
};

//_id, nickname, name, email, phone
var getUserPersonalInfo = function (idList) {
    var idObjList = hikerJoy.validate.adjustObjectIdArray(idList), defer = new Q.defer();
    if (hikerJoy.validate.validateNonEmptyArray(idObjList)) {
        dataBase.getActiveUsersFieldsBy({ '_id': { '$in': idObjList } }, { '_id': 1, 'personalInfo': 1, 'nickName': 1 })
        .then(function (users) {
            if (hikerJoy.validate.validateNonEmptyArray(users))
                defer.resolve(users.map(function (v) { return { '_id': v._id, 'nickName': v.nickName, 'name': v.personalInfo.name, 'email': v.personalInfo.email, 'phone': v.personalInfo.phone }; }));
            else
                defer.resolve([]);
        })
        .fail(function (err) {
            console.log(err.stack);
            defer.resolve([]);
        });
    }
    else
        defer.resolve([]);
    return defer.promise;
};

var expectedError = function (ret) {
    var err = new Error();
    err.expected = true;
    err.hikerJoy_ret = ret;
    return err;
};

var updateCacheInfo = function (key, value) {
    var defer = new Q.defer();
    if (hikerJoy.validate.validateValuedString(key)) {
        dataBase.updateCacheInfo({ 'key': key }, { '$set': { 'value': value } })
        .then(function (ct) {
            defer.resolve(ct);
            if (!ct)
                log.logError('nothing updated for cacheinfo: ' + key, { 'key': key, 'value': value }, null, '0B185946-1054-4AE2-B320-3D610251A607');
        })
        .fail(function (err) {
            defer.reject(err);
            log.logError('error catched when updating cacheinfo: ' + key, { 'key': key, 'value': value }, err, '9C2F58A3-CE88-4833-9C8E-EE8858290C9F');
        })
    }
    else
        defer.reject('invalid key for updateCacheInfo: ' + key);
    return defer.promise;
};


var uploadFileClient = require('./uploadFileClient.js');
var feedbackHelper = require('./feedbackHelper.js');

exports.uploadRequest = uploadFileClient.uploadRequest;
exports.uploadSheetImage = uploadFileClient.uploadSheetImage;
exports.uploadImageForHtmlPost = require('./htmlPost.js').uploadImageForHtmlPost;
exports.getRSAKey = getRSAKey;
exports.getSignKey = getSignKey;
exports.toMD5 = toMD5;
exports.getAndReplaceOrganizerNames = feedbackHelper.getAndReplaceOrganizerNames;
exports.getUserPersonalInfo = getUserPersonalInfo;
exports.expectedError = expectedError;
exports.updateCacheInfo = updateCacheInfo;
