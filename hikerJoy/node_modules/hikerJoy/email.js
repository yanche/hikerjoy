
var constants = require('./constants.js');
var config = require('./config.js');
var Q = require('q');
var mailer = require('nodemailer');
var dataBase = require('hikerJoy_dataBase');
var path = require('path');
var utility = require('utility');
var jade = require('jade');

var emailRegex = constants.emailRegex;

//email list could be string or array
//would throw exception if invalid input, including subject/body/email addrs
var sendEmail = function (option) {
    var toList = option.toList;
    var ccList = option.ccList;
    var bccList = option.bccList;
    var subject = option.subject;
    var body = option.body;
    //var html = Boolean(option.html);

    var toStr = concatEmailList(toList);
    var ccStr = concatEmailList(ccList);
    var bccStr = concatEmailList(bccList);
    if ((typeof subject) !== 'string' || (typeof body) !== 'string')
        throw new Error('invalid subject or body when sending email, subject: ' + subject + ', body: ' + body);

    var mailOptions = {
        from: config.smtpFrom,
        to: toStr,
        cc: ccStr,
        bcc: bccStr,
        subject: subject,
        html: body
    }

    if (config.canSendEmail) {
        var defer = new Q.defer();
        _smtpTrans.sendMail(mailOptions, function (err, response) {
            if (err)
                defer.reject(err);
            else
                defer.resolve("Message sent: " + response.message);

            dataBase.insertOneEmail({
                'status': err ? constants.emailStatus.failed : constants.emailStatus.send,
                'to': toList,
                'cc': ccList,
                'bcc': bccList,
                'subject': subject,
                'body': body,
                'comments': err || ''
            });
        });
        return defer.promise;
    }
    else {
        dataBase.insertOneEmail({
            'status': constants.emailStatus.send,
            'to': toList,
            'cc': ccList,
            'bcc': bccList,
            'subject': subject,
            'body': body,
            'comments': 'not really send out, because not prod deployment'
        });
    }
};

//input: email or list of email
//output: email1, email2, ... OR ''
var concatEmailList = function (lst) {
    if (lst == null)
        return null;
    else if ((typeof lst) === 'string') {
        if (lst.length == 0 || emailRegex.test(lst))
            return lst;
        else
            throw new Error('invalid email list: ' + lst);
    }
    else if (Array.isArray(lst)) {
        if (lst.length == 0)
            return '';
        else {
            var valid = lst.every(function (v, k) {
                return emailRegex.test(v);
            });
            if (valid)
                return lst.join(',');
            else
                throw new Error('invalid email list: ' + lst);
        }
    }
    else {
        throw new Error('invalid email list: ' + lst);
    }
};

var _smtpTrans = mailer.createTransport('SMTP', {
    'host': config.smtpHost, // hostname
    'port': config.smtpPort,
    'auth': config.smtpAuth
});

//receiver: {'personalInfo':{}, 'nickName': }, activity: {'name':, 'startsOn':, 'endsOn':, 'organizer': [ { 'nickName':, 'personalInfo': {} } ] }
var formatSignupNotification = function (receiver, activity) {
    var receiverName = receiver.personalInfo.name || receiver.nickName || '';
    activity.startsOn = activity.startsOn.format('yyyy/MM/dd');
    activity.endsOn = activity.endsOn.format('yyyy/MM/dd');
    var compiler = _getTemplateCompiler('signup');
    try {
        return compiler({ 'receiverName': receiverName, 'siteUrl': config.siteUrl, 'activity': activity });
    }
    catch (err) {
        console.log(err.stack);
    }
};

//receiver: {'ticket': }
var formatPwdresetNotification = function (ticket) {
    var compiler = _getTemplateCompiler('pwdreset');
    try {
        return compiler({ 'siteUrl': config.siteUrl, 'ticket': ticket });
    }
    catch (err) {
        console.log(err.stack);
    }
};

//receiver: {'content': }
var formatActMsg = function (content) {
    var compiler = _getTemplateCompiler('actmsg');
    try {
        return compiler({ 'content': content });
    }
    catch (err) {
        console.log(err.stack);
    }
};

var _getTemplateCompiler = function (template) {
    if(config.cacheEmailTemplates && _jadeTemplateCompilers[template])
        return _jadeTemplateCompilers[template];
    else {
        try {
            var cpl = jade.compileFile(path.join(__dirname, 'emailTemplates', template + '.jade'), {});
            if (config.cacheEmailTemplates) {
                console.log('cache email template jade: ' + template);
                _jadeTemplateCompilers[template] = cpl;
            }
            return cpl;
        }
        catch (err) {
            console.log(err.stack);
        }
    }
};

var _jadeTemplateCompilers = {};

exports.sendEmail = sendEmail;
exports.formatSignupNotification = formatSignupNotification;
exports.formatPwdresetNotification = formatPwdresetNotification;
exports.formatActMsg = formatActMsg;
