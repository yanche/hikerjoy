//this module includes some array/object/string extension methods
var utility = require('utility');
var hikerJoy = require('hikerJoy');
var dataBase = require('hikerJoy_dataBase');
var objectId = require('mongodb').ObjectID;
var constants = hikerJoy.constants;

var validateNullOrEmptyString = function (str) {
    return str == null || str === ''; //null, undefined, ''
};

var validateNickName = function (nn) {
    return (typeof nn) === 'string' && nn.length >= 1 && nn[0] != ' ' && nn[nn.length - 1] != ' ';
};

//not all space
var validateValuedString = function (str) {
    return (typeof str) === 'string' && str.trim().length > 0;
};

var validateName = function (val) {
    return ((typeof val) === 'string') && val.length >= 1 && val.length <= 8 && val.indexOf(' ') === -1;
};

var validateGender = function (val) {
    return ((typeof val) === 'string') && (val === '男' || val === '女');
};

/*
//TODO: check list of university
var validateUniv = function (val) {

    var ret = hikerJoy.commonInfo.univ_available_list.filter(function (univ, k) {
        return val === univ;
    });

    return ((typeof val) === 'string') && (ret.length > 0 || val === '其他');
};
*/

/*
var validateDegree = function (val) {
    return ((typeof val) === 'string') && (val === '本科' || val === '硕士' || val === '博士');
};
*/

/*
//wild, from 1900 to 2100
var validateGradeYear = function (val) {
    var year = Number(val);
    return !isNaN(val) && year >= 1900 && year <= 2100;
};
*/

//input: {'name':, 'items':[{'label':,'type':,'children':}]}
//output: false(validation failed) or adjusted template
var validateAndAdjustSignupSheetTemplate = function (template) {
    try {
        if (!template || (typeof template.name) !== 'string')
            return false;

        var adjName = template.name.trim();
        if (adjName.length === 0)
            return false;
        if (!Array.isArray(template.items) || template.items.length === 0)
            return false;

        var adjItems = __validateAndAdjust_signupSheetLineItems(template.items);
        if (!adjItems || !Array.isArray(adjItems) || adjItems.length === 0) // if returns false or empty set
            return false;

        var adjTemplate = { 'name': adjName, 'items': adjItems };
        return adjTemplate;
    }
    catch (err) {
        console.log(err.stack);
        return false;
    }
};

//input: [{'label':,'type':,'children':}]
//output: return false if validation failed, or Array for adjusted items(could be empty set)
var __validateAndAdjust_signupSheetLineItems = function (items) {
    if (!Array.isArray(items))
        return false;

    try {
        var labels = [];
        var ret = [];
        //return adjusted item
        items.forEach(function (v, k) {
            if (!v) //ignore if null or undefined
                return;
            else {
                if ((typeof v.label) !== 'string' || v.label.trim().length === 0)
                    throw new Error('invalid item label: ' + v.label); //jump out of the forEach loop

                var label = v.label.trim();
                if (labels.contains(label))
                    throw new Error('duplicate item label: ' + label);
                labels.push(label);

                if ((typeof v.type) !== 'string' || !_availableSignupSheetLineItemType.contains(v.type.trim()))
                    throw new Error('invalid item type: ' + v.type);
                var type = v.type.trim();
                var newItem = { 'label': label, 'type': type };
                if (_signupSheetLineItemTypeHasChildren.contains(type)) {
                    if (!Array.isArray(v.children))
                        throw new Error('item with type: ' + type + ' has no children');

                    var adjChildren = v.children.filter(function (v, k) {
                        return (typeof v) === 'string' && v.trim().length > 0; //only take not empty string
                    })
                    .map(function (v, k) { //v should be all valued string now
                        return v.trim();
                    })
                    .distinct();
                    if (adjChildren.length === 0)
                        throw new Error('children: ' + JSON.stringify(v.children) + ' has nothing left after adjustment.');

                    newItem.children = adjChildren;
                }

                ret.push(newItem);
            }
        });
        return ret;
    }
    catch (err) {
        console.log('err when __validateAndAdjust_signupSheetLineItems' + err);
        return false;
    }
};

var _availableSignupSheetLineItemType = [
    'text',
    'textarea',
    'multi-select',
    'select',
    'image',
    'date',
    'weixin'
];

var _signupSheetLineItemTypeHasChildren = ['multi-select', 'select'];

var _isHexString = function (str) {
    return (typeof str) === 'string' && !isNaN(parseInt('0x' + str));
};

//input: {'_id':, 'orgId':, 'statusId':, 'name':, 'startsOn':, 'endsOn':, 'organizer':[], 'intro':, 'picUrl':, 'sheet':, 'recruitment':, 'tags': }
var validateAndAdjustSubmitAct = function (act) {
    if (!act)
        return false;
    var id = act._id, orgId = act.orgId, statusId = Number(act.statusId), name = act.name, startsOn = act.startsOn, endsOn = act.endsOn, organizer = act.organizer, tags = act.tags;
    var intro = act.intro, picUrl = act.picUrl, sheet = act.sheet, recruitment = act.recruitment;
    if ((id != null && !_isHexString(id)) || (orgId != null && !_isHexString(orgId)) || (id != null && orgId == null) || !constants.activeActStatus.contains(statusId))
        return false;
    if ((typeof name) !== 'string' || name.trim().length === 0 || !startsOn || !endsOn)
        return false;
    if (isNaN((new Date(startsOn)).getTime()) || isNaN((new Date(endsOn)).getTime()) || (new Date(startsOn)).getTime() > (new Date(endsOn)).getTime())  //Invalid Date: getTime() --> NaN,  new Date(null) --> 1970/1/1
        return false;
    if ((intro != null && (typeof intro) !== 'string') || (picUrl != null && (typeof picUrl) !== 'string'))
        return false;
    if ((sheet != null && !Array.isArray(sheet)) || (recruitment != null && !Array.isArray(recruitment)) || !validateNonEmptyArray(organizer))
        return false;
    if (sheet != null) { //if not null, must be an array
        var adjSheet = __validateAndAdjust_signupSheetLineItems(sheet);
        if (!adjSheet) //failed validation ofr signup sheet.
            return false;
        else
            sheet = adjSheet;
    }
    //end of validation
    name = name.trim();
    intro = (intro == null || intro.trim().length === 0) ? name : intro.trim();
    picUrl = (picUrl == null || picUrl.trim().length === 0) ? '/content/image/route_default.jpg' : picUrl.trim();
    startsOn = new Date(startsOn);
    endsOn = new Date(endsOn);
    if (Array.isArray(tags) && tags.length > 0) {
        var tagsAdj = [];
        tags.forEach(function (v) {
            if ((typeof v) === 'string' && v.trim().length > 0 && !tagsAdj.contains(v.trim())) {
                tagsAdj.push(v.trim());
            }
        });
        tags = tagsAdj;
    }
    else {
        tags = [];
    }

    var adjOrganizer = [];
    organizer.forEach(function (v) {
        if(validateValuedString(v) && !adjOrganizer.contains(v.trim()))
            adjOrganizer.push(v.trim());
    });

    //currently, no adjustment on recruitment
    return {
        '_id': id,
        'orgId': orgId,
        'statusId': statusId,
        'name': name,
        'startsOn': startsOn,
        'endsOn': endsOn,
        'organizer': adjOrganizer,
        'intro': intro,
        'picUrl': picUrl,
        'sheet': sheet,
        'recruitment': recruitment,
        'tags': tags
    };
};

var validateRegisterForm = function (form) {
    if (!form)
        return false;
    return validateEmail(form.email) &&
           validateEmail(form.contact) &&
           validateValuedString(form.ecp_pwd) &&
           (validateNullOrEmptyString(form.phone) || validatePhone(form.phone)) &&
           (validateNullOrEmptyString(form.name) || validateName(form.name)) &&
           validateGender(form.gender) &&
           (validateNullOrEmptyString(form.nickName) || validateNickName(form.nickName));
};

var validatePersonalInfo = function (info) {
    if (!info)
        return false;
    return validateEmail(info.email) &&
           (validateNullOrEmptyString(info.phone) || validatePhone(info.phone)) &&
           (validateNullOrEmptyString(info.name) || validateName(info.name)) &&
           validateGender(info.gender) &&
           (validateNullOrEmptyString(info.nickName) || validateNickName(info.nickName));
};

//提交的报名表
//input: [ { 'label':, 'type':, 'value': } ]
var validateAndAdjustSignupSheet = function (sheet) {
    if (!Array.isArray(sheet))
        return false;

    var labels = [];
    var ret = [];
    try {
        sheet.forEach(function (v, k) {
            if (!v || (typeof v.label) !== 'string' || v.label.trim().length === 0 || labels.contains(v.label.trim())
                 || (typeof v.type) !== 'string' || !_availableSignupSheetLineItemType.contains(v.type.trim()))
                throw new Error('invalid sheet line item');
            var item = { 'label': v.label.trim(), 'type': v.type.trim(), 'value': v.value };
            labels.push(item.label);
            ret.push(item);
        });
        return ret;
    }
    catch (err) {
        console.log('error when validateAndAdjustSignupSheet, ' + err);
        return false;
    }
};

var validateEmail = function (email) {
    return constants.emailRegex.test(email);
};

var validatePhone = function (phone) {
    return constants.phoneRegex.test(phone);
};

var validateAndAdjustBillStatement = function (billstatement) {
    if (!Array.isArray(billstatement))
        return false;
    var labels = [], len = billstatement.length, ret = [];
    for (var i = 0; i < len; ++i) {
        var label = billstatement[i].label;
        if ((typeof label) !== 'string' || label.trim().length === 0)
            return false;
        label = label.trim();
        if (labels.contains(label)) //duplicate label
            return false;
        labels.push(label);
        var cost = Number(billstatement[i].cost);
        if (isNaN(cost) || cost < 0)
            return false;
        var comments = billstatement[i].comments;
        if ((typeof comments) !== 'string')
            comments = '';
        comments = comments.trim();
        ret.push({ 'label': label, 'cost': cost, 'comments': comments });
    }
    return ret;
};

var validateAndAdjustActSummary = function (summary) {
    if (!summary || (typeof summary) !== 'object')
        return false;
    var contact = [], names = [];
    if(validateNonEmptyArray(summary.contact)) {
        var len = summary.contact.length;
        for(var i = 0; i < len; ++ i) {
            var ct = summary.contact[i];
            var name = _adjustToStringTrim(ct.name);
            var role = _adjustToStringTrim(ct.role);
            var lk = _adjustToStringTrim(ct.contact);
            if(name.length > 0 && !names.contains(name)) {
                names.push(name);
                contact.push({'name': name, 'role': role, 'contact': lk});
            }
            else
                return false; //validation failed
        };
    }
    return {'contact': contact, 'details': summary.details || []};
};

var _adjustToStringTrim = function (val) {
    var ret = '';
    if ((typeof val) !== 'string')
        return ret;
    else
        return val.trim();
};

//input: {'keywords': optional, 'type':, 'content':, 'title':, 'desc':, 'picUrl':, 'url': }
var validateAndAdjustWeixinBody = function (weixinBody, nokeywords) {
    if (!weixinBody)
        return false;
    if (!nokeywords) {
        if (Array.isArray(weixinBody.keywords) && weixinBody.keywords.length > 0) {
            var keywords = [];
            for (var i = 0; i < weixinBody.keywords.length; ++i) {
                if ((typeof weixinBody.keywords[i]) === 'string' && weixinBody.keywords[i].trim().length > 0 && !keywords.contains(weixinBody.keywords[i].trim()))
                    keywords.push(weixinBody.keywords[i].trim());
            }
            if (keywords.length === 0)
                return false;
        }
        else
            return false;
    }

    if (weixinBody.type === 'text') {
        if (validateValuedString(weixinBody.content)) {
            var ret = { 'type': 'text', 'content': weixinBody.content };
            if (!nokeywords)
                ret['keywords'] = keywords;
            return ret;
        }
        else
            return false;
    }
    else if (weixinBody.type === 'news') {
        if (Array.isArray(weixinBody.news) && weixinBody.news.length > 0) { //no lte 10 limitation here
            var news = [];
            for (var i = 0; i < weixinBody.news.length; ++i) {
                var adjNews = _validateAndAdjustOneWeixinNews(weixinBody.news[i]);
                if (adjNews)
                    news.push(adjNews);
                else
                    return false;
            }
            var ret = { 'type': 'news', 'news': news };
            if (!nokeywords)
                ret['keywords'] = keywords;
            return ret;
        }
        else
            return false;
    }
    else
        return false;
};

var _validateAndAdjustOneWeixinNews = function (news) {
    if (validateValuedString(news.title) && (typeof news.desc) === 'string' && validatePicUrl(news.picUrl) && validateUrl(news.url)) {
        return {
            'title': news.title.trim(),
            'desc': news.desc,
            'picUrl': news.picUrl,
            'url': news.url
        };
    }
    else
        return false;
};

//TODO:
var validateUrl = function (strUrl) {
    return (typeof strUrl) === 'string';
};

//TODO:
var validatePicUrl = function (strUrl) {
    return (typeof strUrl) === 'string';
};

var adjustForumTags = function (tags) {
    return adjustTrimedUniqueStringArray(tags);
};

var validateForumPostLabel = function (labelCode) {
    return (typeof labelCode) === 'string' && hikerJoy.constants.forumPostLabels.filter(function (v) { return v.code === labelCode; }).length > 0;
};

var validateAndAdjustNewForumPostRequest = function (req) {
    var orgAlias = req.orgAlias, label = req.label, tags = req.tags, actId = req.actId, title = req.title, content = req.content;
    var preview = req.preview, vote = req.vote, ret = {};
    if ((typeof orgAlias) === 'string') ret.orgAlias = orgAlias.trim();
    if (!validateForumPostLabel(label) || !validateValuedString(title)) return false;
    else { ret.label = label; ret.title = title; }
    if (actId && !utility.tryConvert2ObjId(actId)) return false;
    else ret.actId = actId;
    ret.tags = adjustForumTags(tags);
    if ((typeof preview) !== 'string') preview = '';
    ret.preview = preview.trim().slice(0, 200); //max preview length
    if (hikerJoy.constants.isForumPostLabel4Vote(label)) {
        if (!vote || (typeof vote) !== 'object') return false;
        else ret.vote = {};
        if (vote.multi === true || vote.multi === false) ret.vote.multi = vote.multi;
        else return false;
        var adjOptions = adjustTrimedUniqueStringArray(vote.options);
        if (adjOptions.length > 0) ret.vote.options = adjOptions;
        else return false;
        if (validateValuedString(vote.desc)) ret.vote.desc = vote.desc.trim();
        else ret.vote.desc = '';
    }
    else
        ret.content = content;
    return ret;
};

var validateNonEmptyArray = function (arr) {
    return Array.isArray(arr) && arr.length > 0;
};

var adjustTrimedUniqueStringArray = function (arr) {
    var ret = [];
    if (Array.isArray(arr) && arr.length > 0) {
        arr.forEach(function (v) {
            if (validateValuedString(v) && !ret.contains(v.trim()))
                ret.push(v.trim());
        });
    }
    return ret;
};

var _userAgentMobileRegex1 = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
var _userAgentMobileRegex2 = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;
var isUserAgentMobile = function (agent) {
    return (typeof agent) === 'string' && (_userAgentMobileRegex1.test(agent) || _userAgentMobileRegex2.test(agent.substr(0, 4)));
};

var adjustObjectIdArray = function (arr) {
    var ret = [];
    if (validateNonEmptyArray(arr)) {
        arr.forEach(function (v) {
            var adj = utility.tryConvert2ObjId(v);
            if (adj) ret.push(adj);
        });
    }
    return ret;
};

var validatePicUrlInBase64 = function (str) {
    return (typeof str) === 'string' && str.indexOf('data:image') === 0;
};

var stringEndsWith = function (str, ends) {
    if((typeof str) != 'string' || (typeof ends) != 'string')
        return false;
    if(ends.length === 0)
        return true;
    return str.slice(str.length - ends.length) === ends;
};

exports.validateNullOrEmptyString = validateNullOrEmptyString;
exports.validateNickName = validateNickName;
exports.validateValuedString = validateValuedString;
exports.validatePersonName = validateName;
exports.validateGender = validateGender;
exports.validateAndAdjustSignupSheetTemplate = validateAndAdjustSignupSheetTemplate;
exports.validateAndAdjustSubmitAct = validateAndAdjustSubmitAct;
exports.validateRegisterForm = validateRegisterForm;
exports.validatePersonalInfo = validatePersonalInfo;
exports.validateAndAdjustSignupSheet = validateAndAdjustSignupSheet;
exports.validateEmail = validateEmail;
exports.validatePhone = validatePhone;
exports.validateAndAdjustBillStatement = validateAndAdjustBillStatement;
exports.validateAndAdjustActSummary = validateAndAdjustActSummary;
exports.validateAndAdjustWeixinBody = validateAndAdjustWeixinBody;
exports.validateUrl = validateUrl;
exports.adjustForumTags = adjustForumTags;
exports.validateForumPostLabel = validateForumPostLabel;
exports.validateAndAdjustNewForumPostRequest = validateAndAdjustNewForumPostRequest;
exports.validateNonEmptyArray = validateNonEmptyArray;
exports.adjustTrimedUniqueStringArray = adjustTrimedUniqueStringArray;
exports.isUserAgentMobile = isUserAgentMobile;
exports.adjustObjectIdArray = adjustObjectIdArray;
exports.validatePicUrlInBase64 = validatePicUrlInBase64;
exports.stringEndsWith = stringEndsWith;
