var queryString = require('querystring');
var net = require('net');
var utility = require('utility');
var config = require('hikerJoy').config;
var authPort = config.ports.authServer;
var Q = require('q');
var zlib = require('zlib');

//input: pack {req:, res:}
//cookie string. key1=values1;key2=value2
//cookies obj: {key1:value1,key2:value2}
var parseCookie = function (pack) {
    var cookieStr = pack.req.headers.cookie;
    var ret = {};
    if (cookieStr) {
        var set = cookieStr.split(';');
        for (var i = 0; i < set.length; ++i) {
            var pair = set[i].split('=');
            var l = pair[0].trim();
            if (l) {
                ret[l] = pair[1].trim();
            }
        }
    }
    pack.req.cookies = ret;
    return pack;
};

var serializeCookie = function (key, val, opt) {
    if (key && val) {
        var pairs = [key + '=' + val];
        if (opt) {
            if (opt.maxAge) pairs.push('Max-Age=' + opt.maxAge);
            if (opt.path) pairs.push('Path=' + opt.path);
            if (opt.httpOnly) pairs.push('HttpOnly');
            if (opt.secure) pairs.push('Secure');
        }
        pairs.push('Path=/');
        pairs.push('Domain=' + config.siteDomain);
        return pairs.join('; ');
    }
    else
        return null;
};

var rejectWith302 = function (url, res) {
    res.setHeader('Location', url);
    res.writeHead(302);
    res.end();
};

var rejectWith404 = function (err, res) {
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.writeHead(404);
    res.end('page/resource not found: ' + err);
};

var rejectWith500 = function (err, res) {
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.writeHead(500);
    res.end('internal server error');
};

var response = function (req, res) {
    res.setHeader('Content-Type', res.contentType || 'text/plain; charset=utf-8');
    res.setHeader('X-Frame-Options', 'DENY'); //always deny displaying in a frame
    if (res.lastModified) res.setHeader('Last-Modified', res.lastModified);
    var cookies = [];
    if (req.session) cookies.push(serializeCookie('sessionId', req.session.sessionId, { 'maxAge': config.sessionExpMin * 60, 'httpOnly': true }));
    if (cookies.length > 0) res.setHeader('Set-Cookie', cookies);
    if(res.contentEncoding) res.setHeader('Content-Encoding', res.contentEncoding);
    res.writeHead(200);
    res.end(res.content);
};

//return: {'content':, 'contentType':, 'contentEncoding': }
var httpEncoding = function (content, contentType, acceptEncoding) {
    if (_shouldEncodeResponse(content, contentType)) {
        if (_gzip.regex.test(acceptEncoding))
            var encoding = _gzip;
        else if (_deflate.regex.test(acceptEncoding))
            var encoding = _deflate;
    }
    if (encoding) {
        var defer = new Q.defer();
        encoding.func(content, function (err, buf) {
            if (err)
                defer.reject(err);
            else
                defer.resolve({'content': buf, 'contentType': contentType, 'contentEncoding': encoding.head});
        });
        return defer.promise;
    }
    else
        return {'content': content, 'contentType': contentType};
};
var _deflate = {
    'regex': /\bdeflate\b/,
    'func': zlib.deflate,
    'head': 'deflate'
};
var _gzip = {
    'regex': /\bgzip\b/,
    'func': zlib.gzip,
    'head': 'gzip'
};

var _shouldEncodeResponse = function (content, contentType) {
    return content.length > 1000 && contentType.indexOf('image/') != 0 && contentType.indexOf('application/font') != 0;
};

exports.httpHelper = {
    'getCookie': parseCookie,
    'rejectWith404': rejectWith404,
    'rejectWith500': rejectWith500,
    'rejectWith302': rejectWith302,
    'response': response,
    'httpEncoding': httpEncoding
};