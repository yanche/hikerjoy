
require('./obj_ext.js');

Object.defineProperty(Array.prototype, 'contains', { 
    value: function (t){
        try {
            var has = false;
            if(this){
                for(var i in this){
                    if(this[i] === t){
                        has = true;
                        break;
                    }
                }
            }

            return has;
        }
        catch(err) {
            console.log('error in Array.prototype.contains, error: ' + err);
            return false;
        }
    },
    configurable: true,
    writable: true,
    enumerable: false
});

Object.defineProperty(Array.prototype, 'containsObjectId', { 
    value: function (t){
        try {
            var has = false;
            if(this){
                for(var i in this){
                    if(t.equals(this[i])){
                        has = true;
                        break;
                    }
                }
            }

            return has;
        }
        catch(err) {
            console.log('error in Array.prototype.containsObjectId, error: ' + err);
            return false;
        }
    },
    configurable: true,
    writable: true,
    enumerable: false
});

Object.defineProperty(Array.prototype, 'containsOne', { 
    value: function (arr){
        try {
            var has = false;
            if(this){
                for(var i in this){
                    if(arr.contains(this[i])){
                        has = true;
                        break;
                    }
                }
            }

            return has;
        }
        catch(err) {
            console.log('error in Array.prototype.containsOne, error: ' + err);
            return false;
        }
    },
    configurable: true,
    writable: true,
    enumerable: false
});

Object.defineProperty(Array.prototype, 'distinct', { 
    value: function (){
        var dis = {};
        var hasNull = false, hasUndefined = false;
        this.forEach(function (v, k){
               if(v != null) //not null nor undefined
                   dis[v] = 1; //mark this element
               else if(v === null)
                   hasNull = true;
               else
                   hasUndefined = true;
        });
        var ret = [];
        for(var idx in dis)
            ret.push(idx);
        if(hasUndefined)
            ret.push(undefined);
        if(hasNull)
            ret.push(null);
        return ret;
    },
    configurable: true,
    writable: true,
    enumerable: false
});
