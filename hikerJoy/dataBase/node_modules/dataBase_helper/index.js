
var Q = require('q');

var getOneDoc = function (col, filter) {
    var defer = new Q.defer();
    col.findOne(filter, function (err, doc) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(doc);
    });
    return defer.promise;
};

var getOneDocFields = function (col, filter, fields) {
    var defer = new Q.defer();
    col.findOne(filter, fields, function (err, doc) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(doc);
    });
    return defer.promise;
};

var getDocs = function (col, filter) {
    var defer = new Q.defer();
    col.find(filter).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

var getDocsFields = function (col, filter, fields) {
    var defer = new Q.defer();
    col.find(filter, fields).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

var getDocsInPage = function (col, filter, skip, take) {
    var defer = new Q.defer();
    col.find(filter).skip(skip).limit(take).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

var getDocsFieldsInPage = function (col, filter, fields, skip, take) {
    var defer = new Q.defer();
    col.find(filter, fields).skip(skip).limit(take).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

var insertOneDoc = function (col, doc) {
    //no delete _id
    if(doc && !Array.isArray(doc)) {
        var defer = new Q.defer();
        col.insert(doc, function (err, rets) {
            if (err)
                defer.reject(err);
            else
                defer.resolve(rets[0]); //insert one
        });
        return defer.promise;
    }
    else
        throw new Error('invalid input for dataBase.helper.insertOneDoc, must be not be an array');
};

var insertDocs = function (col, docs) {
    //no delete _id
    if(Array.isArray(docs) && docs.length > 0) {
        var defer = new Q.defer();
        col.insert(docs, function (err, rets) {
            if (err)
                defer.reject(err);
            else
                defer.resolve(rets); //insert more than one docs, return an array
        });
        return defer.promise;
    }
    else
        throw new Error('invalid input for dataBase.helper.insertDocs, must be an array with at least one element');
};

var updateDocs = function (col, filter, update) {
    var defer = new Q.defer();
    col.update(filter, update, { 'multi': true, 'safe': true }, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct); //updated count
    });
    return defer.promise;
};

var removeDocs = function (col, filter) {
    var defer = new Q.defer();
    col.remove(filter, { 'safe': true }, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct); //updated count
    });
    return defer.promise;
};

var countDocs = function (col, filter) {
    var defer = new Q.defer();
    col.count(filter, { 'safe': true }, function (err, count) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(count);
    });
    return defer.promise;
};


exports.collections = require('./collections.js').collections;

exports.getOneDoc = getOneDoc;
exports.getOneDocFields = getOneDocFields;
exports.getDocs = getDocs;
exports.getDocsFields = getDocsFields;
exports.getDocsInPage = getDocsInPage;
exports.getDocsFieldsInPage = getDocsFieldsInPage;

exports.insertOneDoc = insertOneDoc;
exports.insertDocs = insertDocs;
exports.updateDocs = updateDocs;
exports.removeDocs = removeDocs;
exports.countDocs = countDocs;
